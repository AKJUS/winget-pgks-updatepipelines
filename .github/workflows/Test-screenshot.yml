name: Test-Screenshot

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  screenshot:
    runs-on: windows-latest  # Using a GitHub-hosted Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Screen Capture Recorder
        shell: powershell
        run: |
          # Create a download directory for our tools
          New-Item -ItemType Directory -Path ".\downloads" -Force
          
          # Download the Screen Capture Recorder installer
          $installerUrl = "https://github.com/rdp/screen-capture-recorder-to-video-windows-free/releases/download/v0.13.3/Setup.Screen.Capturer.Recorder.v0.13.3.exe"
          $installerPath = ".\downloads\scr_installer.exe"
          Write-Host "Downloading Screen Capture Recorder..."
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath -UseBasicParsing
          
          # Install the Screen Capture Recorder silently. This tool may be necessary to provide a virtual capture interface.
          Write-Host "Installing Screen Capture Recorder..."
          Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT" -Wait
          
          # Wait for installation to complete and drivers to register.
          Write-Host "Waiting for installation to register..."
          Start-Sleep -Seconds 10
          
          Write-Host "Screen Capture Recorder installed successfully."

      - name: Download and Extract FFmpeg
        shell: powershell
        run: |
          # Download the latest FFmpeg portable build
          $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          $ffmpegZip = ".\downloads\ffmpeg.zip"
          Write-Host "Downloading FFmpeg..."
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip -UseBasicParsing
          
          # Extract FFmpeg from the downloaded zip file
          Write-Host "Extracting FFmpeg..."
          Expand-Archive -Path $ffmpegZip -DestinationPath ".\ffmpeg" -Force
          
          # Find the ffmpeg.exe path in the extracted directory
          $ffmpegExe = (Get-ChildItem -Path ".\ffmpeg" -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1).FullName
          Write-Host "Found FFmpeg at: $ffmpegExe"
          
          # Save the path to a file for use in later steps
          "FFMPEG_EXE=$ffmpegExe" | Out-File -FilePath ffmpeg_path.env -Encoding utf8

      - name: Capture Entire Virtual Desktop
        shell: powershell
        run: |
          # Load the FFmpeg executable path from the environment file
          . (Get-Content .\ffmpeg_path.env | ConvertFrom-StringData)
          
          # Use FFmpeg with gdigrab to capture the entire virtual desktop.
          # -f gdigrab specifies the Windows screen capture
          # -framerate 1 for a single frame per second (only one screenshot needed)
          # -frames:v 1 instructs FFmpeg to capture one frame
          Write-Host "Capturing screenshot of the virtual desktop..."
          & $env:FFMPEG_EXE -f gdigrab -framerate 1 -i desktop -frames:v 1 screenshot.png
          
          # Verify that the screenshot was generated
          if (Test-Path "screenshot.png") {
            Write-Host "Screenshot captured successfully."
          } else {
            Write-Error "Screenshot capture failed."
            exit 1
          }

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: virtual-display-screenshots
          path: screenshot.png
          retention-days: 5  # Artifacts will be kept for 5 days