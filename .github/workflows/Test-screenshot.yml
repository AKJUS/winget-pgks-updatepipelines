name: Test-Screenshot

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  screenshot:
    runs-on: windows-latest  # Using a GitHub-hosted Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%dT%H_%M_%S')" >> $env:GITHUB_ENV

      # - name: Install winget
      #   uses: Cyberboss/install-winget@v1
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Install FFmpeg
      #   uses: AnimMouse/setup-ffmpeg@v1
      - name: Install Screen Capture Recorder
        shell: powershell
        run: |
          # Create directory for downloads
          New-Item -ItemType Directory -Path ".\downloads" -Force
          
          # Download Screen Capture Recorder installer
          $installerUrl = "https://github.com/rdp/screen-capture-recorder-to-video-windows-free/releases/download/v0.13.3/Setup.Screen.Capturer.Recorder.v0.13.3.exe"
          $installerPath = ".\downloads\scr_installer.exe"
          
          Write-Host "Downloading Screen Capture Recorder..."
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath -UseBasicParsing
          
          # Install silently
          Write-Host "Installing Screen Capture Recorder..."
          Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT" -Wait
          
          # Allow time for drivers to register
          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 10
          
          Write-Host "Screen Capture Recorder installed successfully"

      - name: Take screenshot using FFmpeg
        shell: powershell
        run: |
          # Create directory for downloads
          # New-Item -ItemType Directory -Path ".\downloads" -Force
 
          # # Use FFmpeg to capture screen
          # Write-Host "Capturing screenshot with FFmpeg..."
          # & ffmpeg -f gdigrab -framerate 1 -i desktop -frames:v 1 screenshot.png

          # Download portable FFmpeg
          $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          $ffmpegZip = ".\downloads\ffmpeg.zip"
          
          Write-Host "Downloading FFmpeg..."
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip -UseBasicParsing
          
          # Extract FFmpeg
          Write-Host "Extracting FFmpeg..."
          Expand-Archive -Path $ffmpegZip -DestinationPath ".\ffmpeg" -Force
          
          # Find the ffmpeg.exe path
          $ffmpegExe = Get-ChildItem -Path ".\ffmpeg" -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1 -ExpandProperty FullName
          
          # Use FFmpeg to capture screen
          Write-Host "Capturing screenshot with FFmpeg..."
          & $ffmpegExe -f gdigrab -framerate 1 -i desktop -frames:v 1 screenshot.png
          
          # Verify screenshot was created
          if (Test-Path "./screenshots/screenshot.png") {
            Write-Host "Screenshot captured successfully"
          } else {
            Write-Error "Screenshot capture failed"
            exit 1
          }

          mv .\screenshot.png .\screenshots\screenshot-${{ env.date }}.png

      - name: Commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: "${{ github.action }} - new screenhsot"
            file_pattern: ./screenshots/screenshot-${{ env.date }}.png

    #   - name: Upload Screenshot Artifact
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: virtual-display-screenshots
    #       path: screenshot.png
    #       retention-days: 5  # Artifacts will be kept for 5 days